.container {
    border: 5px solid #e1bee7;
    background-color: #fff1ff;
    height: 300px;
    display: grid; /* Establecemos que el contenedor va a tener un display: grid */
    grid-template-columns: 100px 100px 100px; /* Establecemos las columnas del grid */
    grid-template-rows: 100px 100px; /* Establecemos las filas del grid */
    grid-auto-flow: column; /* Establecemos que el flujo de los elementos sea por columnas */
    grid-gap: 20px; /* Establecemos el espacio entre columnas y filas */
    /* propiedades para centrar el contenedor */
    justify-content: center;
    align-content: center;
}
.item {
    border: 5px solid #00bcd4;
    font-size: 4rem;
    display: flex; /* Establecemos que el elemento sea un flexbox */
    justify-content: center;
    align-items: center;
}
/* --------------------------container 2 -----------------------------*/
.container2{
    border: 3px solid #e1bee7;
    background-color: #fff1ff;
    height: 300px;
    margin-top: 10px;
    display: grid;
    grid-template-columns: 100px 100px 100px;
    grid-template-rows: 100px 100px;
    justify-content: center;
    align-content: center;
}
.item-2{
    border: 2px solid #00bcd4;
    font-size: 4rem;
    display: flex;
    justify-content: center;
    align-items: center;
}
/* manipulacion de c/item-2 */
.item1{
    border: 5px solid #f8bbd0;
    background-color: #ffeeff;
    grid-column-start: 1; /* arranca en la colum 1 */
    grid-column-end: 4; /* termina en la colum 4 */
}
.item2 {
    border: 5px solid #e1bee7;
    background-color: #fff1ff;
    grid-column-start: 1;
    grid-column-end: 1;
}
.item3 {
    border: 5px solid #ca69db;
    background-color: #bf7bbf;
    grid-column-start: 2;
    grid-column-end: 4;
}
.item4{
    border: 5px solid #00bcd4;
    background-color: #e0f7fa;
    grid-column-start: 1;
    grid-column-end: 4;
}
/* ----------------ejemplo de contenedor con declaracion de areas --------------*/
/* .contenedor2 {
    border: 5px solid #e1bee7;
    background-color: white;
    display: grid;
    grid-template-columns: 150px 150px 150px;
    grid-template-rows: 75px 75px 75px;
    grid-template-areas: 
        "header header header"
        "side main main"
        "side main main";
    place-content: center;
} 
.item-1 {
    border: 5px solid #f8bbd0;
    background-color: #ffeeff;
    grid-area: header;
}
.item-2 {
    border: 5px solid #e1bee7;
    background-color: #fff1ff;
    grid-area: side;
}
*/
/* --------------------------contenedor 3-------------------------------- */
.contenedor3 {
    border: 3px solid #e1bee7;
    background-color: #fff1ff;
    display: grid;
    /* grid-template-columns: 30px 200px 60px; */
    grid-template-columns: minmax(30px, 300px) 200px minmax(60px, 250px);
    grid-template-rows: 100px 100px 100px;
}
.itemEj3 {
    border: 3px solid #00bcd4;
    font-size: 2rem;
}
/* -------------Funciones minmax y repeat -------------------------------*/
/* 
Minmax:
Nos ayuda a declarar un tamaño mínimo y máximo para el ancho o alto de una celda. Podemos modificar el tamaño del contenedor sin importar el tamaño del contenido.
Entonces cambiamos los valores establecidos en las columnas; la primera en un ancho mínimo de 30px y un máximo de 300px, y la tercera con un mínimo de 60px y un máximo de 250px.
grid-template-columns: minmax(30px, 300px) 200px minmax(60px, 250px);

Repeat:
Imaginemos que queremos una grilla con 12 columnas del mismo ancho. No vamos a escribir 12 veces el valor del ancho, sino una vez usando repeat.
Entonces, para que la celda se adapte al tamaño del contenido sin importar la dimensión, definimos la cantidad de celdas en que queremos aplicar la acción (tres) y damos la propiedad de auto. Si colocáramos un valor en pixeles realmente no solucionaríamos el problema.
grid-template-rows: repeat(3, auto);
*/

/*-------------Palabras clave especiales para creación de código-------------------------------- */
/*
fr : es una unidad relativamente nueva de medida especial de CSS Grid para darle ancho o alto a filas y columnas. 1fr representa una fracción del total de columnas o filas.
min-content : ajusta el ancho de la celda lo mínimo posible sin romper su contenido.
max-content : ajusta el ancho de la celda lo máximo posible para mostrar su contenido.
auto-fill : logra que la grilla ocupe el 100% del espacio que tiene. Agrega columnas “fantasma” que rellenan el espacio sobrante del contenedor.
auto-fit : ensancha las columnas para que ocupen todo el espacio del contenedor.
auto-fill y auto-fit: ayudan a la grilla a ocupar el 100% del espacio disponible.
*/

.contenedor4{
    border: 3px solid #e1bee7;
    background-color: #fff1ff;
    display: grid;
    /* grid-template-columns: repeat(4, 100px); */ /* creo 4 col de 10px sin especificar su alto */
    grid-template-columns: repeat(4, 1fr); /*Piensa en las columnas como fracciones: si la grilla tiene 4 columnas, todas del mismo ancho, cada columna es igual a una fracción de la grilla.
        Entonces, si en vez de colocar 100px de ancho, colocamos 1fr, logramos que cada columna siempre tenga el mismo ancho, ocupando siempre el 100% del ancho de la pantalla.  */
    /*
        También podemos agregar distintos valores proporcionales al ancho de la columa. Por ejemplo, podemos hacer que una columna sea del doble de ancho de la anterior, y así con las demás. 
        grid-template-columns: 1fr 3fr 1fr 2fr;
    */
    /* 
        Podemos cambiar una sola columna para que use el ancho mínimo que ocupa su contenido con min-content. De esta manera, al redimensionar la pantalla, el ancho de las demás columnas cambiará, pero el de la modificada no, porque ya ocupa el ancho mínimo desde el principio.
        grid-template-columns: 1fr 3fr min-content 2fr;
        Y lo mismo para el ancho maximo con max-content
        grid-template-columns: 1fr 3fr max-content 2fr;
    */
}
.itemEj4 {
    border: 3px solid #00bcd4;
    font-size: 2rem;
}

/* -----------------------auto-fill y auto-fit -------------------------*/
/* 
    Auto-fit va a ajustar los elementos del grid hasta rellenar el contenedor y auto-fill va a ajustar los elementos del grid hasta colocarlos todo en la grilla dejando un hueco libre o vacío en caso de no rellenar todo el contenido.
*/
/* Para que funcione, es necesario especificar el ancho mínimo y máximo del contenedor. En este caso queremos que comience desde 100px y crezca hasta llegar a una fracción de la grilla. No colocamos valores absolutos para que el contenedor siempre se ajuste al ancho de la pantalla. */
.contenedor-auto-fill {
    border: 5px solid #e1bee7;
    background-color: #fff1ff;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}
.contenedor-auto-fit {
    border: 5px solid #e1bee7;
    background-color: #fff1ff;
    display: grid;
    margin-top: 100px;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
} 
